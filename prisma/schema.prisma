// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    n            String   @id @default(cuid())
    serialNumber String
    name         String
    brand        String
    modelName    String
    range        String
    ram          String
    accessories  String[]

    userName   String
    management String
    department String
    office     String

    date        DateTime @default(now())
    orderNumber String
    note        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model PostTracking {
    n            String
    serialNumber String
    name         String
    brand        String
    modelName    String
    range        String
    ram          String
    accessories  String[]

    userName   String
    management String
    department String
    office     String

    date        DateTime @default(now())
    orderNumber String
    note        String

    createdAt DateTime @id @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Acc {
    n            String @id @default(cuid())
    type         String
    serialNumber String
    brand        String
    modelName    String
    condition    String

    userName   String
    department String

    date DateTime @default(now())
    note String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model AccTracking {
    n            String
    type         String
    serialNumber String
    brand        String
    modelName    String
    condition    String

    userName   String
    department String

    date DateTime @default(now())
    note String

    createdAt DateTime @id @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    role          String         @default("none")
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    postt         PostTracking[]
    accs          Acc[]
    acct          AccTracking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
